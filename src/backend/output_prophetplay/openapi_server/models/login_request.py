from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class LoginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benutzername=None, passwort=None):  # noqa: E501
        """LoginRequest - a model defined in OpenAPI

        :param benutzername: The benutzername of this LoginRequest.  # noqa: E501
        :type benutzername: str
        :param passwort: The passwort of this LoginRequest.  # noqa: E501
        :type passwort: str
        """
        self.openapi_types = {
            'benutzername': str,
            'passwort': str
        }

        self.attribute_map = {
            'benutzername': 'benutzername',
            'passwort': 'passwort'
        }

        self._benutzername = benutzername
        self._passwort = passwort

    @classmethod
    def from_dict(cls, dikt) -> 'LoginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoginRequest of this LoginRequest.  # noqa: E501
        :rtype: LoginRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benutzername(self) -> str:
        """Gets the benutzername of this LoginRequest.


        :return: The benutzername of this LoginRequest.
        :rtype: str
        """
        return self._benutzername

    @benutzername.setter
    def benutzername(self, benutzername: str):
        """Sets the benutzername of this LoginRequest.


        :param benutzername: The benutzername of this LoginRequest.
        :type benutzername: str
        """
        if benutzername is None:
            raise ValueError("Invalid value for `benutzername`, must not be `None`")  # noqa: E501

        self._benutzername = benutzername

    @property
    def passwort(self) -> str:
        """Gets the passwort of this LoginRequest.


        :return: The passwort of this LoginRequest.
        :rtype: str
        """
        return self._passwort

    @passwort.setter
    def passwort(self, passwort: str):
        """Sets the passwort of this LoginRequest.


        :param passwort: The passwort of this LoginRequest.
        :type passwort: str
        """
        if passwort is None:
            raise ValueError("Invalid value for `passwort`, must not be `None`")  # noqa: E501

        self._passwort = passwort
